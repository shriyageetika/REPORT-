 BHABHA ATOMIC RESEARCH CENTRE
(VISAKHAPATNAM)
 (JAN 21 – FEB 21)








  PROJECT ON 

[ PROJECT NAME ]


BY
BANAVATHU GEETIKA BAI
&
ALLABOYINA DISREEYA


BACHELOR OF COMMERECE (B.COM),
[COMPUTER APPLICATIONS] 

MVR DEGREE COLLEGE,
GAJUWAKA, VISAKHAPATNAM.







CONTENTS




1.

INTRODUCTION

1.1
INTRODUCTION TO PANDAS

1.2
OVERVIEW OF URANIUM FISSION AND REACTOR SIMULATIONS
2.

 LITERATURE SURVEY 

2.1
IMPORTANCE 

2.2
SCOPE AND OBJECTIVES

2.3 
KEY PARAMETERS
3.

METHODOLOGY

3.1
DATA ACQUISATION AND PREPROCESSING

3.2
COMPONENTS AND ITS MECHANISM
4.

DEVELOPMENT ENVIRONMENT

4.1
HARDWARE

4.2
SOFTWARE
5.

VISUAL REPRESENTATION AND ANALYSIS

5.1
VISUALIZATION TOOLS 

5.2
TYPES OF VISUAL REPRESENTATION & ANALYSIS OF RESULTS
5.

CONCLUSION

6.

REFERENCE


ABSTRACT


Nuclear fission plays a critical role in energy production and reactor safety analysis. This project explores the simulation of uranium fission dynamics, focusing on energy release patterns, neutron flux variations, and reactor behavior under different conditions.  

Using machine learning techniques and data analysis with  pandas, we use leveraging methods like time resampling, subsetting, and visualization. Advanced data-driven modeling techniques, contributing to improved predictive accuracy and decision-making in their respective fields.

Additionally, various graphical visualizations, including heatmaps, line charts, scatter plots and box plots, are employed to uncover underlying patterns in the dataset. The findings contribute to a better understanding of reactor stability and operational efficiency. Using Python and the Pandas library, we preprocess and visualize the datasets to identify trends and correlations within the reactor system.

This research demonstrates the effectiveness of data-driven approaches in nuclear physics simulations and provides insights into future enhancements in reactor monitoring and control. The results emphasize the importance of real-time data processing for early identification of unusual or unexpected patterns, predictive maintenance, and overall reactor performance improvements.





1. INTRODUCTION

1.1 INTRODUCTION TO PANDAS
 
Pandas is a powerful open-source Python library designed for data manipulation, analysis, and visualization. Pandas is widely used in scientific computing, engineering, finance, and machine learning due to its ability to handle large datasets efficiently. It provides data structures such as Series (one-dimensional) and DataFrame (two-dimensional) that make handling structured data easier and more efficient. Pandas is particularly useful for working with structured data like CSV files. 

Pandas serves as the core tool for handling time-series data related to uranium fission and reactor simulations. The library enables efficient data cleaning, transformation, and visualization, allowing us to analyze reactor performance metrics such as neutron flux, temperature variations, power output, and pressure fluctuations over time.


1.2  OVERVIEW OF URANIUM FISSION AND REACTOR . .                  .                     SIMULATIONS

Uranium fission is a nuclear reaction in which a heavy atomic nucleus, splits into smaller nuclei, releasing a significant amount of energy. This process is the foundation of nuclear power generation and is widely used in nuclear reactors to produce electricity. The fission process occurs when a neutron strikes the uranium nucleus, causing it to become unstable and split into two or more smaller nuclei (fission fragments) along with additional neutrons and energy release. These released neutrons further initiate a chain reaction, sustaining the energy generation process. 
Uranium fission is the core process behind nuclear energy generation, and reactor simulations help in improving efficiency, ensuring safety, and understanding reactor dynamics. Using Pandas and Python, the project processes time-series data, focusing on key parameters such as neutron flux, reactor temperature, power output, pressure variations, and cooling efficiency. 



2. LITERATURE SURVEY
 
2.1 IMPORTANCE

Uranium fission plays a crucial role in nuclear energy production, providing a reliable and efficient power source with minimal carbon emissions. The controlled splitting of uranium nuclei releases significant energy, which is harnessed in nuclear reactors for electricity generation. Within these reactors, pincell simulations are essential for studying neutron transport, fuel behavior, and reactor efficiency at a microscopic level. These models help optimize fuel utilization, enhance safety by preventing overheating, and improve neutron flux distribution for stable reactor operations. Additionally, pincell analyses contribute to understanding fuel burnup, which is critical for extending fuel life and managing radioactive waste effectively.           
By improving reactor performance and safety, uranium fission and pincell simulations play a vital role in advancing nuclear technology, ensuring energy security, and reducing reliance on fossil fuels.

2.2 SCOPE AND OBJECTIVES

The scope of uranium fission and reactor-related pincell simulations extends across multiple areas, including energy production, reactor design, and safety analysis. These simulations help optimize fuel efficiency, improve neutron transport modeling, and enhance reactor stability by predicting thermal and radiation behavior at a granular level.

The primary objective of this project is to analyze uranium fission and nuclear reactor operations using time-series data and computational modeling techniques.

The project aims to simulate different reactor conditions to predict power output and optimize operational efficiency. The significant goal is the early detection of anomalies that could indicate potential reactor instability. By identifying irregular patterns, temperature spikes, pressure fluctuations, and deviations in neutron flux, this project seeks to enhance nuclear safety through data-driven analysis. Statistical methods and visualization techniques, including line plots, heatmaps, histograms, and correlation matrices, will be used to study relationships between reactor parameters and detect abnormal trends. This project also focuses on processing real-time reactor data using Pandas to clean, transform, and resample data for better trend analysis.



2.3 KEY PARAMETERS

A. Time
Represents the simulation time step or physical time in transient analyses. Helps in studying time-dependent changes in neutron flux, temperature, and power distribution. Used in burnup calculations to determine fuel depletion over time. 
In our data, the process is noted in milliseconds and thus, the key parameters are also noted accordingly. 

B. Flux integral 
The flux integral is a fundamental concept in reactor physics, representing the total neutron population passing through a specific region over time. It is crucial for determining reaction rates, power distribution, and fuel burnup in nuclear reactors. In pincell simulations, flux integrals help refine neutron transport models, improving reactor core calculations and advancing the development of next-generation nuclear systems.

C. Intlet_T  And Outlet_T
Inlet_T (Inlet Temperature) and Outlet_T (Outlet Temperature) are key parameters in nuclear reactor thermal-hydraulic analysis. They represent the temperature of the coolant (usually water, liquid metal, or gas) at the entry and exit points of the reactor core or fuel channel.
      » Inlet_T (Inlet Temperature): The temperature of the coolant before it enters the reactor core. It is crucial for maintaining proper heat transfer and ensuring efficient reactor operation.
      
      » Outlet_T (Outlet Temperature): The temperature of the coolant after absorbing heat from the nuclear fuel. This determines the efficiency of heat removal and impacts overall reactor performance.

D. Max_T
Max_T refers to the maximum temperature observed within a reactor simulation, typically in fuel, cladding, or coolant regions. In pincell simulations, Max_T is often used to evaluate the peak temperature within the fuel pellet or the highest coolant temperature under operational conditions. A high Max_T may indicate insufficient cooling, high power density, or poor heat transfer efficiency, necessitating design optimizations. Engineers monitor Max_T to ensure the reactor operates within safe thermal limits, preventing structural damage and ensuring efficient heat removal.

E. Nek_temp And Nek_bulk_temp 
» Nek_temp: It refers to the local temperature at a specific point within the reactor, such as the fuel surface, cladding, or coolant region, and is essential for analyzing temperature gradients and identifying potential hot spots. Nek_temp helps in understanding localized heat transfer and safety concerns. 

» Nek_bulk_temp: It represents the bulk or average temperature of the coolant flowing through the reactor, typically calculated as a volume-weighted or mass-weighted average. This parameter is crucial for evaluating the overall efficiency of heat removal and maintaining thermal stability in the system. Nek_bulk_temp provides insights into the reactor’s cooling performance, ensuring optimal thermal management. 
Both parameters play a critical role in reactor simulations, contributing to fuel performance optimization and preventing overheating risks.


F. Points_0, Points_1 and Points_2
In the context of reactor physics and pincell simulations, Points_0, Points_1, and Points_2 likely refer to specific spatial locations or nodes used for neutron flux, temperature distribution, or material composition analysis. These points can represent different positions in the fuel, moderator, or coolant regions, helping in detailed calculations. 

» Points_0 (Center of the Fuel Rod) Core region, highest heat generation.
» Points_1 (Fuel-Cladding Boundary)  Important for heat transfer.
» Points_2 (Cladding-Coolant Boundary) Outer surface, where heat is transferred to coolant.

G. Points_Magnitude:
It likely refers to the magnitude of a physical quantity (such as temperature, neutron flux, or heat flux) at specific spatial points in a reactor simulation. This is particularly useful in pincell modeling and finite element analysis for evaluating performance across different reactor regions.

H. Temperature: 
One of the most critical parameters, representing thermal conditions in different reactor regions. Used for fuel performance analysis, ensuring that temperatures remain within safe limits. Helps in evaluating coolant efficiency and detecting potential hot spots.


3. METHODOLOGY
                                                                                                                                                                                         
3.1 DATA ACQUISITION AND PREPROCESSING
In this project, data acquisition and preprocessing play a crucial role in analyzing uranium fission and reactor simulation data. The dataset consists of time-series data collected from reactor simulations, tracking parameters such as neutron flux, temperature variations, pressure, and power output over time. To ensure accuracy and reliability in analysis, the following steps are undertaken:

A. DATA ACQUISITION
      
    • Source of Data: 
      The data is obtained from reactor simulation outputs and experimental logs in the form of CSV files.
    • Loading Data: 
      The datasets are loaded into Python using the Pandas library for structured analysis.We have used the csv files (time.csv , block.csv) for our project and analysed our data graphically.

SYNTAX WITH EXAMPLE
import pandas as pd
time_df = pd.read_csv('time.csv')
block_df = pd.read_csv('block.csv')
       
         

. Exploring the Dataset:
Once the raw data is acquired, the next crucial step is to     explore it thoroughly. The initial structure and summary statistics are checked to understand the data distribution.


SYNTAX 
print(time_df.info())  # Check data types and missing values
print(time_df.describe())  # Summary statistics
print(time_df.head())  # Preview first few rows




B. DATA PREPROCESSING

Preprocessing is performed to clean and transform raw data into a structured format for analysis.
. Handling missing values: 
Missing values (NaN) in data can lead to incorrect analysis and unreliable predictions, so they must be handled properly.

SYNTAX
print(time_df.isnull().sum())  # Check for missing values

Note: Their are no missing (NaN) values in our data.




3.2 COMPONENTS AND ITS MECHANISM

A. Uranium as fuel

Uranium is a heavy, radioactive metal used as fuel in nuclear reactors due to its ability to sustain a fission chain reaction. Inside a nuclear reactor, a neutron collides with a U-235 nucleus, causing it to split and release a large amount of energy, additional neutrons, and radiation. These newly released neutrons strike other U-235 atoms, continuing the chain reaction. The heat generated from fission is absorbed by a coolant and transferred to a steam generator, which drives a turbine to produce electricity. 
Uranium's high energy density makes it an efficient fuel, with just 1 kg of uranium releasing as much energy as 3 million kg of coal. To ensure safety and efficiency, nuclear reactors use moderators, control rods, and cooling systems to regulate the reaction and prevent overheating.


B. Pincell








Fig: pincell

A pin cell is the fundamental unit of a nuclear fuel assembly, consisting of a cylindrical fuel rod that contains uranium dioxide (UO₂) pellets enclosed in a protective cladding, typically made of zirconium alloy. The fuel rod is surrounded by a coolant (such as water or liquid sodium) and, in some reactor designs, a moderator (like water or graphite) to slow down neutrons for efficient fission. Multiple pin cells are arranged in a grid pattern to form a fuel assembly, which is loaded into the reactor core. The design and arrangement of pin cells impact power distribution, fuel burnup, and reactor safety, making them a key factor in nuclear reactor engineering.


C. Coolant

A coolant in a nuclear reactor is a substance used to transfer the heat generated during the fission process from the reactor core to the steam generator or directly to a turbine for electricity production. The coolant absorbs the heat from the fuel rods and carries it away to prevent overheating. Common coolants include water, liquid sodium, helium gas and molten salts. The coolant circulates through the reactor core and passes through heat exchangers where the heat is transferred to a secondary system that produces steam. 

D. Graphite 

Graphite is a good moderator because it is a light material with a low atomic mass, allowing it to transfer kinetic energy to the fast neutrons effectively. Additionally, graphite is stable at high temperatures and does not become radioactive under neutron bombardment, making it suitable for use in reactors operating at high temperatures. While graphite does not have the same cooling properties as water, it can still function effectively in gas-cooled reactors, where it is combined with helium or another coolant to remove heat from the core. Graphite is used as a neutron moderator in some nuclear reactors, such as the Magnox and Advanced Gas-cooled Reactors (AGRs), due to its ability to slow down fast neutrons produced during fission without absorbing too many of them. This is important because slower neutrons are more likely to cause fission when they collide with Uranium-235 (U-235) nuclei, increasing the efficiency of the reaction.
E. Compacts 
 
The term compacts in the context of nuclear fuel generally refers to small, solid pellets of nuclear fuel that are tightly packed into fuel rods for use in nuclear reactors. These pellets are usually made from uranium dioxide (UO₂) or other fissile materials and are compacted to a specific density and shape to maximize the amount of fuel and ensure efficient heat transfer during fission.
In nuclear fuel manufacturing, these compacts are created by first powdering the uranium and then pressing the powder into small cylindrical shapes. The compacted fuel pellets are inserted into fuel rods, which are then bundled together to form fuel assemblies. The design of these compacts allows for efficient fuel use, thermal conductivity, and the ability to withstand the high temperatures and radiation levels inside a reactor. The compact nature of the fuel helps maximize the energy density, making uranium an effective and long-lasting source of energy in nuclear reactors.

F. Reactor 

A nuclear reactor is a facility where nuclear fission is controlled and sustained to generate energy. This energy is used primarily for electricity generation. A nuclear reactor is a device used to initiate and control a sustained nuclear fission chain reaction, primarily for generating electricity, producing radioactive isotopes, or powering naval vessels. The core of a reactor contains fuel rods and moderator. 

CHAIN REACTION 
 
A nuclear chain reaction occurs when a fissile atom absorbs a neutron and becomes unstable, causing it to split into two smaller nuclei (fission fragments), releasing energy and additional neutrons. These neutrons can then go on to collide with other fissile atoms, causing further fission reactions. This process creates a self-sustaining sequence, with each fission event releasing more neutrons that trigger additional fission events. In a controlled nuclear reactor, this chain reaction is regulated using control rods that absorb excess neutrons, ensuring a steady, controlled release of energy. The heat generated by the chain reaction is used to produce steam, which drives turbines to generate electricity. By managing the balance of neutron production and absorption, the chain reaction can be maintained at a stable level, providing continuous energy output in nuclear power plants.




4. DEVELOPMENT ENVOIRNMENT

To ensure an efficient and robust simulation and modeling process for uranium fission and reactor behaviors, we have established a comprehensive development environment. This environment is specifically tailored to support the computational and data analysis needs of our project. Below is a detailed breakdown of the hardware and software used.


4.1 HARDWARE

» Processing Power (CPU): The simulations were executed on a high-performance computing system with an Intel Core i7 processor. For more computationally demanding tasks, we used a multi-core CPU cluster to enable parallel processing, which is critical for handling large-scale nuclear simulations and fission models.

» Memory (RAM): Given the complexity of the nuclear reactor models, we used a system with 8GB of RAM. This was essential for efficiently managing the large datasets produced during simulations and performing real-time data analysis. 


4.2 SOFTWARE

» Operating System (OS): Our development environment operates within a Linux-based cluster environment. Linux was chosen due to its excellent stability, scalability, and support for parallel processing, which is crucial for managing complex simulations on multiple nodes in a high-performance computing setup.

» Interface: For code execution, simulation, and data analysis, we used Google Colab. Google Colab offers an interactive, cloud-based development environment that allows us to write and execute Python code in a notebook format. Additionally, Google Colab enables collaboration among us, making it an ideal choice for this project.

» Programming Language: Python was the primary programming language used for the development and training of the machine learning models. The language's flexibility and extensive library ecosystem made it a robust platform for building, evaluating, and optimizing nuclear reactor models.

• Pandas: It helped in numerical computations and managing simulation data, ensuring data consistency and accuracy  throughout the process.
• Matplotlib and Seaborn: They were used for plotting graphs and visualizing the results of reactor simulations, including power output and neutron flux distributions.

5. VISUAL REPRESENTATION AND ANAYLSIS 

5.1 VISUALIZATION TOOLS
In our project, we utilized Matplotlib and Seaborn as our primary visualization tools to analyze and represent data effectively. These libraries allowed us to create insightful graphical representations, which were crucial in understanding trends, patterns, and relationships within the dataset.

MATPLOTLIB 

Matplotlib is a powerful Python library for creating static, animated, and interactive visualizations. It provides fine-grained control over plots, making it a versatile tool for data representation. We used Matplotlib to:

    • Generate line plots to observe trends in our dataset.
    • Create scatter plots to visualize relationships between variables.
    • Develop bar charts and histograms to understand distributions.
    • Customize axes, labels, legends, and titles to enhance readability.



SEABORN 

Seaborn, built on top of Matplotlib, offers an aesthetically pleasing and high-level interface for statistical graphics. It simplifies complex visualizations and integrates well with Pandas DataFrames. We leveraged Seaborn to:

    • Create heatmaps for correlation analysis.
    • Design box plots and violin plots for statistical insights into data distributions.
    • Utilize pair plots to examine relationships between multiple variables.
    • Enhance visual appeal with built-in themes and color palettes.

By employing Matplotlib and Seaborn, we ensured that our visualizations were not only informative but also intuitive and visually appealing, aiding in better interpretation and communication of results throughout our project.

Matplotlib and Seaborn are two powerful Python libraries commonly used for data visualization. Matplotlib is the foundational library in Python for creating a wide range of static, animated, and interactive visualizations.Seaborn, built on top of Matplotlib, simplifies the process of creating attractive statistical graphics


5.2 TYPES OF VISUAL REPRESENTATION  & ANALYSIS OF RESULTS

In the context of this report, various types of visual representations are utilized to present complex data in a clear and insightful manner. Visual aids not only enhance the comprehension of intricate patterns, trends, and relationships within the data but also serve as a powerful tool to convey key findings effectively. 

This section outlines the different types of visual representations employed in this report to support the analysis of potential energy surfaces, reactor simulations, and machine learning models.


• LINE GRAPH
Line graphs are one of the most effective visual tools used to display data points in a continuous manner, typically over time or another ordered variable. In this report, line graphs are employed to illustrate the temporal trends of various parameters, particularly in the context of reactor simulations and uranium fission data.

• HEATMAP 
A heatmap is a graphical representation of data where individual values are depicted using color gradients. It is commonly used to visualize correlations between variables, with colors ranging from red (strong positive correlation) to blue (strong negative correlation).

EXAMPLE 1
        fig 1: flux_integral vs max_t

» ANALYSIS
The graph of flux_integral against max_T shows a distinct trend. Initially, there is a sharp increase in the flux_integral from a low value to approximately 36,000. This rapid rise occurs at very small values of max_T, indicating a sudden accumulation of flux. After this sharp increase, the graph reaches a plateau, where the flux_integral remains constant despite increasing max_T. This suggests that the system quickly reaches a saturation point, beyond which further increases in max_T have no effect on the integral. The overall trend indicates an initial transient phase followed by a steady-state condition.

EXAMPLE 2
Fig 2: flux_integral vs time

» ANALYSIS
The graph of Flux Integral over Time shows a distinct trend where the flux integral starts at zero and rapidly increases to a high value (~37,000) within a very short time. This sharp rise indicates an initial surge in flux accumulation. After this sudden increase, the flux integral reaches a steady-state condition, remaining constant for the rest of the observed time. This suggests that the system quickly reaches equilibrium, where no further accumulation occurs despite the passage of time. The trend highlights an initial transient phase followed by a stable plateau, indicating rapid saturation of the flux integral.

EXAMPLE 3

fig 3: temperature vs time

» ANALYSIS
The graph displays temperature data over time, with several distinct lines representing different temperature measurements: flux_integral (blue), inlet_T (orange), max_T (green), and outlet_T (red).
Initially, there is a sharp spike in the flux_integral value, reaching around 1000 before stabilizing. The inlet_T and max_T lines show relatively stable temperatures, remaining below 600. The outlet_T appears to stabilize slightly below the inlet_T, indicating a consistent temperature difference during the measurement period.
A prominent gray shaded region suggests a range of stable temperatures in which the outlet_T generally fluctuates.
EXAMPLE 4 
           fig 4: temperature vs points_2 (length of the pincell)

» ANALYSIS
The graph illustrates the relationship between temperature and the variable points_2, which appears to represent the length of a pin cell. The various temperature lines for compacts (blue), graphite (orange), coolant (green), and compacts_trimmer_tri (red) exhibit distinct trends.
As points_2 increases from 0 to approximately 1.6, all temperature lines initially rise, indicating an increase in temperature with the length of the pin cell. The compacts and graphite lines show a significant upward trend, reaching temperatures above 1000, while the coolant line remains well below that, stabilizing around 600.
The compacts_trimmer_tri line follows a similar upward trend but fluctuates more, indicating variations in temperature stability.

EXAMPLE 5
fig 5: temperature vs points_2 for each block 
(i.e., compacts, graphite, coolant and compacts_trimmer-tri)


» ANALYSIS
The figure presents four separate plots, each showing the relationship between temperature (y-axis) and  points_2 (x-axis) for different materials: compacts, graphite, coolant and compacts_trimmer-tri.

       
       • Compacts (Top Left): The temperature increases steadily as points_2 rises, peaking just above 1000 around points_2 =1.0. After the peak, the temperature gradually declines. The presence of vertical error bars indicates some variability in the temperature readings, but the overall trend remains clear.
       
       • Graphite (Top Right): This plot mirrors the compacts trend with an increase leading to a peak just under 1000. The decline that follows suggests a similar thermal response profile, although it appears to stabilize slightly lower than the compacts at higher points_2 values. Error bars are present, indicating variability.
       
       • Coolant (Bottom Left): In contrast, the coolant's temperature fluctuates horizontally, remaining fairly stable between 400 and 600 across the points_2 range. The consistency in temperature suggests that the coolant experiences minimal variation compared to the other materials, as indicated by the vertical error bars.
       
       • Compacts Trimmer Tri (Bottom Right): This plot closely resembles the trends in the first two plots, showing a sharp rise in temperature, peaking around 1100 before descending. The pattern indicates a strong thermodynamic response as with the compacts.


EXAMPLE 6


fig 6: correlation heatmap

» ANALYSIS
The heatmap illustrates the correlation between four variables: t, Points_2, nek_temp, and nek_bulk_temp. A strong negative correlation (-0.57) is observed between t and both nek_temp and nek_bulk_temp, suggesting that as t increases, the temperature-related variables tend to decrease. Conversely, Points_2 has a weak positive correlation (0.18) with t, indicating a minimal relationship. Additionally, nek_temp and nek_bulk_temp exhibit a perfect correlation (1), meaning they move in complete synchronization. However, Points_2 shows almost no correlation with the temperature variables, implying little to no direct relationship.
6. CONCLUSION

This project successfully analyzed and evaluated the key aspects of [mention project topic]. Through comprehensive research and data analysis, significant insights were gained. 
This study analyzed the chain reaction process in a nuclear reactor, focusing on neutron flux behavior, heat transfer, and overall reactor stability. The results indicate that energy release follows a rapid rise before stabilizing, ensuring controlled and sustained fission. Temperature variations across different reactor regions highlight efficient cooling mechanisms that maintain safe operating conditions.
Through visual representation techniques such as heatmaps and line graphs, key patterns and trends were identified, offering deeper insights into reactor performance. These visualizations helped in understanding the relationships between reactor parameters, enabling better analysis of fission behavior and thermal efficiency.
Overall, this study enhances our understanding of uranium fission dynamics and reactor operations. These results contribute to advancements in nuclear energy technology, reinforcing the importance of data-driven approaches in reactor monitoring and safety management. Future work can focus on refining thermal models and integrating real-time monitoring for enhanced predictive maintenance and performance optimization.
Despite certain challenges, the project outcomes provide a strong foundation for further improvements and future research. 



7. REFERENCES

1. Bhabha Atomic Research Centre (BARC), "Fundamentals of Nuclear Reactor Physics," Visakhapatnam.

2. Pandas Documentation, "Data Analysis and Visualization using Python Pandas," Available at: https://pandas.pydata.org.

3. Seaborn and Matplotlib Documentation, "Visual Representation of Scientific Data," Available at: https://seaborn.pydata.org. and https://matplotlib.org.

4. GitHub Repository, "URANIUM-FISSION-AND-REACTOR-SIMULATION-DATA" 
Available at: https://github.com/shriyageetika/URANIUM-FISSION-AND-REACTOR-SIMULATION-DATA. 
